<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "../SIMP_Documentation.ent">
%BOOK_ENTITIES;
]>
<chapter id="ch-ig-Hiera_Walkthrough">
  <chapterinfo>
    <title id="ch-ig-Hiera_Walkthrough-title">Hiera Overview</title>
    <affiliation>
      <orgname>SIMP team</orgname>
    </affiliation>
  </chapterinfo>
  <title>Hiera Overview</title>
    <para>
      SIMP now uses Hiera natively instead of Extdata.  From Puppet Labs website: Hiera is a key/value
      lookup tool for configuration data, built to set node-specific data without repeating yourself.
      It is an attempt to make SIMP more configurable to you, the end user.  It configures Puppet in two
      ways: automatic parameter lookup/hiera lookup functions, and assigning classes to nodes.  The
      former allows you to generate reusable code and concentrates parameter assignment to one directory.
      The latter is a supplement to the failed inheritance model.
    </para>
  <section id="sect-ig-Hiera_Walkthrough-Parameters">
  <title>Setting Parameters</title>
    <para>
    <emphasis role="bold">Automatic Lookup</emphasis> You can now safely declare any class on
       any node with 'include', even if the class is parametized.  Before Hiera, this was not possible.
       Puppet will automatically retrieve class parameters from Hiera using keys.  Add a key with
       a value pair to an appropriate yaml file, say default.yaml, as such:
    </para>
    <para>
    <example>
      <title>Adding a Key/Value Pair to Hiera</title>
      <indexterm>
        <primary>Source</primary>
        <secondary>Adding a Key/Value Pair to Hiera</secondary>
      </indexterm>
      <indexterm>
        <primary>HIERA</primary>
        <seealso>Examples</seealso>
      </indexterm>
      <programlisting language="XML">
      ---
      classfoo::parameter_bar: "Woo"
      classfoo::parameter_baz: "Hoo"
      </programlisting>
    </example>
    </para>
    <para>
      You can then 'include classfoo' on any node, with parameter_bar and parameter_baz defaulting to
      Woo and Hoo, respectively.
    </para>
    <para>
      <emphasis role="bold">Lookup Functions</emphasis> You are not required to set up your hierarchy for
      automatic variable lookup.  Using three functionts, you can query Hiera for any key.
    </para>
    <para>
      The first is 'hiera'.  This uses standard priority lookup and can retrieve values of any data type
      from Hiera.  If no key is found, a default should be included.
      <emphasis role="italic">$myvar = hiera('parameter_bar', 'Woo')</emphasis>
    </para>
    <para>
      The second is 'hiera_array'.  This uses an array merge lookup.  It retrieves all array values for a
      given key througout the entire hierarchy and flattens them into a single array.
    </para>
    <para>
      The third is 'hiera_hash'.  This uses a hash merge lookup.  It retrieves all hash values for a given
      key throughout the entire hierarchy and merges them into a single hash.
    </para>
  </section>
  <section id="sect-ig-Hiera_Walkthrough-Assigning_Classes">
  <title>Assigning Classes to Nodes</title>
    <para>
      Assigning classes to nodes is done with the 'hiera_include' function.  Hiera does an array merge lookup
      on 'tags' to retrieve classes which should be included on a node.  In SIMP, we place hiera_include('classes')
      in <emphasis role="italic">/etc/puppet/manifests/site.pp</emphasis>.  Since site.pp is outside of any
      node definition and below all top scope variables, every node controlled by puppet will get every
      class tagged with 'classes' <emphasis role="bold">in its hierarchy</emphasis>.  Additionally, simp_def.yaml
      in is the hierarchy of every node, so every node will receive those classes (by default).
    </para>
  </section>
  <section id="sect-ig-Hiera_Walkthrough-Define_Types">
  <title>Assigning Defined Types to Nodes</title>
    <para>
      Defined types do not have the ability to receive parameters via Hiera in the traditional sense.  To include
      a defined type on a node, one could use creat_resources, but this is messy and discouraged.  Instead,
      make a site class, <emphasis role="italic">/etc/puppet/modules/site/manifests/my_site.pp</emphasis>.
      For example, to include tftpboot linux_model and assign_host on your puppet server, puppet.your.domain:
    </para>
    <para>
    <example>
      <title>Adding a Site Manifest</title>
      <indexterm>
        <primary>Source</primary>
        <secondary>Adding a Site Manifest</secondary>
      </indexterm>
      <indexterm>
        <primary>HIERA</primary>
        <seealso>Examples</seealso>
      </indexterm>
      <programlisting language="Ruby">
      # in /etc/puppet/modules/site/manifests/tftpboot.pp
      # Set KSSERVER statically or use Hiera for lookup

      class site::tftpboot {
        include 'tftpboot'

        tftpboot::linux_model { 'CentOS_6':
          kernel => 'centos6_x86_64/vmlinuz',
          initrd => 'centos6_x86_64/initrd.img',
          ks     => "http://KSSERVER/ks/pupclient_x86_64.cfg",
          extra  => 'ipappend 2'
        }

        tftpboot::assign_host { 'default': model => 'CentOS_6' }
      }
      </programlisting>
    </example>
    </para>
    <para>
      Then, in <emphasis role="italic">/etc/puppet/hieradata/hosts/puppet.your.domain.yaml</emphasis>
    </para>
    <para>
    <example>
      <title>Adding TFTP Site to Hiera</title>
      <indexterm>
        <primary>Source</primary>
        <secondary>Adding TFTP Site to Hirea</secondary>
      </indexterm>
      <indexterm>
        <primary>HIERA</primary>
        <seealso>Examples</seealso>
      </indexterm>
      <programlisting language="XML">
      ---
      classes:
        - 'site::tftpboot'
      </programlisting>
    </example>
    </para>
  </section>
  <section id="sect-ig-Hiera_Walkthrough-File_Structure">
  <title>SIMP Hiera File Structure</title>
    <para>
      <emphasis role="italic">/etc/puppet/hiera.yaml</emphasis> Hiera's config file, used to
        control the hierarchy of your backends.
    </para>
    <para>
      <emphasis role="italic">/etc/puppet/hieradata/</emphasis> Default location of the
      yaml files which contain your node data
    </para>
    <para>
      <emphasis role="italic">/etc/puppet/hieradata/simp_classes.yaml</emphasis> The
      list of default classes to include on any SIMP system.
    </para>
    <para>
      <emphasis role="italic">/etc/puppet/hieradata/simp_def.yaml</emphasis> Contains the
      variables needed to configure a working SIMP system.  Modified by simp-config.
    </para>
    <para>
      <emphasis role="italic">/etc/puppet/hieradata/hosts/</emphasis> By populating this directory with
      with some.host.name.yaml file, you can assign parameters to host some.host.name
    </para>
    <para>
      <emphasis role="italic">/etc/puppet/hieradata/domains/</emphasis> Same principal as hosts, but
      domain names.
    </para>
    <para>
      <emphasis role="italic">/etc/puppet/manifests/</emphasis> Contains site.pp and all other node
      manifests.  BE CAREFUL when modifying this directory, site.pp contains your globals.  This directory
      can be used to supplement or even REPLACE Hiera, with nodes.  Note that Hiera cannot regex hostnames to apply manifests,
      so a node manifest will have to be created here if you wish to have that ability.
    </para>
  </section>
</chapter>

<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "../SIMP_Documentation.ent">
%BOOK_ENTITIES;]>

<chapter id="ch-sc-Operational_Security">
  <chapterinfo>
    <title id="ch-sc-Operational_Security-title">Operational Security</title>
    <affiliation>
      <orgname>SIMP Team</orgname>
    </affiliation>
    <keywordset>
      <keyword>SIMP</keyword>
      <keyword>Security</keyword>
      <keyword>Secure</keyword>
      <keyword>Accredited</keyword>
      <keyword>Framework</keyword>
      <keyword>Puppet</keyword>
    </keywordset>
  </chapterinfo>
  <title>Operational Security</title>
  <para>
   This chapter contains SIMP security concepts that are related to 
   the operational security controls in 
  <ulink url="http://csrc.nist.gov/publications/PubsSPs.html">NIST 800-53</ulink>.  
  </para>
  <section id="Configuration_Managment">
    <title>Configuration Management</title>
    <para>This section describes the management of various configurations
    within SIMP.</para>
    <section id="Baseline_Configurations">
      <title>Baseline Configurations</title>
      <para>
       SIMP baselines include configuration settings and Puppet modules. 
       Currently, baselines are maintained for both Red Hat/CentOS 5.x 
       and Red Hat/CentOS 6.x. Each configuration item that is managed by 
       a Puppet module has an RPM installed on the Puppet Master in the form 
       of <emphasis role="italic">pupmod-name-x.x.x-x</emphasis>. This process
       allows for one main SIMP baseline to be maintained and modules to be 
       upgraded easily. An overall SIMP RPM is also installed on the 
       Puppet Master, which denotes the version number of SIMP that is 
       installed. [CM-2, CM-2(2), CM-2(3), CM-6]
      </para>
      <para>  
       SIMP installs a minimal set of RPMs, which can be found in 
       <xref linkend="appe-sc-Kickstart"/>. RPMs, services, and IPtables 
       rules all use a deny-all, but allow-by-exception module. Additional 
       RPMs must be installed by each implementation. Services must be 
       declared explicitly or they will be disabled by Puppet; IPtables 
       rules must allow a service explicitly. [CM-2(5)]
      </para>
    </section>
    <section id="Management_Changes">
      <title>Managing Configuration Changes</title>
      <para>
       Configuration change approvals are managed by each implementation; 
       SIMP only provides the mechanisms to apply changes on clients. 
       A combination of Puppet, rsync, and YUM is used to apply those changes 
       across all (or selected) Puppet clients. All changes made are audited 
       with auditd or are logged to other files via syslog. [CM-3(a), CM-3(3)]
      </para>
      <para>
       UNIX systems are made up of hundreds of configuration files that can 
       contain dozens of settings. SIMP does not make an attempt to manage 
       all of the settings in every file. Instead, critical operating system 
       files or files that need to be controlled centrally are managed. 
       Implementations can manage additional files if they are deemed necessary. 
       [CM-6]
      </para>
    </section>
    <section id="Security_Validation">
      <title>Security Verification and Flaw Remediation</title>
      <para>
       SIMP cannot detect flaws automatically; each implementation is responsible
       for tracking flaws. However, SIMP provides a way for flaws to be fixed 
       across all clients. One or all of the following can help automate flaw 
       remediation [CM-6, SI-2, SI-2(1), SI-2(4)]:
      </para>
      <itemizedlist mark="bullet">
        <listitem>
          <para>
           <emphasis role="bold">Puppet:</emphasis> Apply a configuration change 
           to files that are managed by Puppet. 
          </para>
        </listitem>
        <listitem>
          <para>
           <emphasis role="bold">rsync:</emphasis> Use this mechanism to deliver
           a file to a client. This can be used with or without Puppet to 
           synchronize files.
          </para>
        </listitem>
        <listitem>
          <para>
           <emphasis role="bold">YUM:</emphasis> Update packages nightly with YUM. 
           Placing an updated package in YUM and running a YUM update manually, or 
           allowing time for the cron job to run, will ensure packages on all 
           clients are updated. Otherwise, a cron job will perform a daily update 
           of packages with YUM.
          </para>
        </listitem>
        <listitem>
          <para>
           <emphasis role="bold">PSSH:</emphasis> Allow commands to run across a set 
           of nodes with the PSSH utility. Through the use of keys, this becomes a 
           powerful way to run a one-time operation against a large number of nodes.
          </para>
        </listitem>
      </itemizedlist>
      <para>
       The extent of security verification that is performed currently is based on 
       changes to files that Puppet or the Advanced Intrusion Detection Environment (AIDE) 
       provides. There will soon be profiles included with SIMP that utilize the 
       Security Content Automation Protocol (SCAP) libraries included with Red Hat 
       and CentOS to check configuration settings. [SI-6]
      </para>
    </section>
    <section id="Malicious_Code">
      <title>Malicious Code Protection</title>
      <para>
       For most environments, SIMP will use ClamAV to protect against malicious 
       code. Rsync is used to push out new definitions, which should be updated by 
       the local administrator regularly. SIMP also comes with a 
       <emphasis role="italic">mcafee:uvscan</emphasis> module that manages an 
       installation of uvscan, if it is preferred. The module can configure 
       <emphasis role="italic">.dat</emphasis> file updates to occur over rsync.
      </para>
      <para>
       Both the ClamAV and McAfee modules provide a method to run a scan via cron 
       on a customer scheduled basis. [SI-3] SIMP also comes with the 
       <emphasis role="italic">chkrootkit</emphasis> tool to check for 
       <emphasis role="italic">rootkits</emphasis>. The tool runs as a cron job and 
       places its output into syslog. [SI-3]
      </para>
    </section>
    <section id="Information_Integrity">
      <title>Software and Information Integrity</title>
      <para>
       Unauthorized changes to a local client can be detected by Puppet or AIDE 
       (for any file managed by Puppet). In the event that a managed file is 
       changed locally, Puppet will revert the file back to its original state. 
       It is important to note that this is a function of Puppet and is intended 
       to be more of a configuration management feature rather than a security 
       feature. If a Puppet client has been compromised, the Puppet Master may not 
       have the ability to retake control over that client. However, the Puppet Master 
       can configure all other nodes to deny traffic from the compromised node if they are
       configured by the administrator to do so. There are additional configuration 
       files that are checked by AIDE, which is triggered by a cron job. AIDE logs
       any detected file changes in syslog. Each implementation may add additional 
       files that are managed by Puppet or watched by AIDE. The AIDE baseline 
       database is updated periodically to handle the installation and updating of 
       system RPMs and reduce false positives. [SI-7, SI-7(1), SI-7(2), SI-7(3)]
      </para>
    </section>
  </section>
  <section id="Remote_Maintenance">
    <title>Remote Maintenance</title>
    <para>
     Remote maintenance can be performed on SIMP using SSH. Local maintenance can 
     be performed at the console or via serial port (if available). SSH sessions 
     are tracked and logged using the security features built into SIMP. Console 
     access requires someone to have access to the physical (or virtual) console 
     along with the <emphasis role="italic">root</emphasis> password. Auditing of 
     those actions also occurs in accordance with the configured audit policy. 
     It is up to the implementation to decide how to distribute authentication 
     information for remote maintenance. [MA-4, MA-4(1), MA-6]
    </para>
  </section>
  <section id="Incident_Response">
    <title>Incident Response</title>
    <para>
     While Puppet is not intended to be a security product primarily, its features 
     help provide security functionality such as dynamic reconfigurations and 
     wide-scale consistent mitigation application. If an implementation chooses, 
     they can leverage Puppet&apos;s ability to reconfigure systems as part of 
     incident response. [IR]
    </para>
  </section>
  <section id="Contingency_Planning">
    <title>Contingency Planning</title>
    <para>
     SIMP does not provide any direct support for contingency planning. Some of 
     the mechanisms provided by SIMP might be used to support an implementation&apos;s 
     contingency plan. 
    </para>
  </section>
  <section id="System_Backup">
    <title>System Backup</title>
    <para>
     SIMP comes with a  module called <emphasis role="italic">backuppc</emphasis>. 
     This module provides a base configuration of the 
     <ulink url="http://backuppc.sourceforge.net/">BackupPC</ulink> 
     software and allows Puppet servers and clients to perform backups.
    </para>
  </section>
</chapter>

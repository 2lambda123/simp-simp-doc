<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "../SIMP_Documentation.ent">
%BOOK_ENTITIES;
]>
<chapter id="ch-ug-Upgrading_Puppet">
  <chapterinfo>
    <title id="ch-ug-Upgrading_Puppet-title">Upgrading SIMP</title>
    <affiliation>
      <orgname>SIMP team</orgname>
    </affiliation>
    <keywordset>
      <keyword>upgrade</keyword>
      <keyword>Puppet</keyword>
      <keyword>catalog</keyword>
      <keyword>variables</keyword>
      <keyword>scoping</keyword>
      <keyword></keyword>
      <keyword>resources</keyword>
    </keywordset>
    <itermset>
      <indexterm>
        <primary>Puppet</primary>
        <secondary>upgrade</secondary>
      </indexterm>
      <indexterm>
        <primary>upgrade</primary>
        <secondary>Puppet</secondary>
      </indexterm>
    </itermset>
  </chapterinfo>
  <title>Upgrading SIMP</title>
    <para>
      This chapter provides information on how to upgrade a running instance to
      the latest codebase. Also covered are items of note when refactoring your
      custom code to work with the 2.X and 4.X series of SIMP.
    </para>
  <xi:include href="Puppetmaster_Backup.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
  <section id="sect-ug-Puppet-Pre-Upgrade">
    <title>Pre-Upgrade Recommendations</title>
    <para>
      The following process should be followed before upgrade.
    </para>
    <table frame="all">
      <title>SIMP Pre Upgrade</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <colspec colnum="1" colname="c1" colwidth="*"/>
        <colspec colnum="2" colname="c2" colwidth="8*"/>
        <thead>
          <row>
            <entry>Step</entry>
            <entry>Process/Action</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry> <orderedlist><listitem><para/></listitem></orderedlist> </entry>
            <entry>
              Run <emphasis role="bold">puppet agent
              --disable</emphasis> to disable puppet.
              <para></para>
              <para> <emphasis role="bold">Note:</emphasis>
                  If you think you will need more than 4 hours to
                  complete this task, also disable puppet in root's
                  crontab.
                </para>
            </entry>
          </row>
          <row>
            <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
            <entry>
              <para>
                You may wish to block all communications
                with external agents while updating the server. This is not
                required but could spare you some headaches if something doesn't
                work properly.
              </para>
              <para>
                The simplest way to do this is to do the following:
                <programlisting language="Bash">
       # Add the following prior to the 'ESTABLISHED,RELATED' line in
       # /etc/sysconfig/iptables
       -A LOCAL-INPUT -m state --state NEW -m tcp -p tcp --dport 8140

       # Set /etc/sysconfig/iptables immutable
       chattr +i /etc/sysconfig/iptables

       # Restart iptables
       service iptables restart
                </programlisting>
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="sect-ug-Puppet_Upgrade-2.7_Upgrade">
    <title>Puppet 2.7 Upgrade</title>
    <para>This section contains information regarding the reasons to
      upgrade to the 2.7 version of Puppet from the 0.24.9 version.</para>
  <section id="sect-ug-Puppet_Upgrade-History">
    <title>History</title>
    <para>
      During testing, the SIMP Team discovered that the previous rewrites
      (2.6 and earlier) of Puppet introduced bugs that were "show-stoppers"
      for the SIMP codebase. As of version 2.6.6, the bugs have been fixed,
      which allows code to be converted to newer versions. The 2.0 and 4.0
      releases are the first to use the 2.7 Puppet codebase.
     </para>
     <para>
      Numerous performance optimizations and feature enhancements have been made
      in Puppet to better support large-scale environments. A large part of the
      code rewrite moving to the 2.7 series was purely for performance optimization.
      The 2.6 series provides support for regular expressions across the board.
     </para>
     <para>
      The latest version of Puppet includes support for DNS Service (SRV) records,
      which will help with multi-master scalability as well as support for Ruby 1.9.
      The addition of 1.9 support provides for lower-level optimizations as evidenced
      by the initial 1.9 tests.
     </para>
     <para>
      Since the ceasing of Puppet Labs' development on the 0.24 series, there have been
      approximately 1000 bugs fixed in the Puppet codebase. This is potentially
      1000 instances of issues that the SIMP Team may encounter in the future, including
      potential security fixes. However, at this time, the codebases have diverged
      such that the team can no longer easily back-patch into the 0.24 series.
     </para>
  </section>
  <section id="sect-ug-Puppet_Upgrade-Migration">
    <title>Migration</title>
    <para>
    The following sections provide the steps to migrate the codebase.
    Additional changes may be necessary for downstream modifications.
    </para>
    <section id="sect-ug-Puppet_Upgrade-Upgrade-Running-System">
      <title> Upgrading A Running SIMP system </title>
      <para>
        The following process will upgrade all SIMP packages.
      </para>
      <table frame="all">
        <title>SIMP Upgrade Process</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <colspec colnum="1" colname="c1" colwidth="*"/>
          <colspec colnum="2" colname="c2" colwidth="8*"/>
          <thead>
            <row>
              <entry>Step</entry>
              <entry>Process/Action</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry> <orderedlist><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Recursively copy the <emphasis role="bold">SIMP</emphasis>
                folder from the root level of the DVD (or tarball if you have
                that) over /srv/www/yum/SIMP on the Puppet server.
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Run <emphasis>'updaterepos'</emphasis> as root.
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Fix all permissions on /srv/www/yum
                <programlisting language="Bash">
       chmod -R g+rX /srv/www/yum
       chgrp -R apache /srv/www/yum
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Update the puppet server by typing <emphasis>'yum clean all &amp;&amp; yum -y update'</emphasis>.
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Change directory to /etc/puppet/manifests and run
                <programlisting language="Bash">
                  find . -name "*.rpmnew"
                </programlisting>
                Examine all differences between the 'rpmnew' files and your
                existing files to ensure that you have all necessary updates in
                your existing configuration files.
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Restart your puppetmaster using <emphasis>'service puppetmaster
                restart'</emphasis>.
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                <para>
                  Re-enable puppet using <emphasis role="bold">puppet
                  agent --enable</emphasis>.
                </para>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                <para>
                  Run <emphasis>'puppet agent -t'</emphasis> and ensure that all of
                  your updates propagated cleanly.
                </para>
                <para>
                  If you see errors from iptables, this may be due to the
                  optional step taken above. If you did not take this step, then
                  you should not see any iptables errors unless there is a
                  problem with the manifests.
                </para>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                <para>
                You're done!
                </para>
                <para>
                If you didn't follow the recommended pre-upgrade steps, then
                simply wait for your clients to check in over time and update
                themselves. If there are any that you are particularly concerned
                about, you may want to run <emphasis>puppet agent -t</emphasis>
                on those manually and check for errors.
                </para>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Optional Undo: If you followed the pre-upgrade recommendations, than do the following:
                <programlisting language="Bash">
       # Remove immutability from /etc/sysconfig/iptables
       chattr -i /etc/sysconfig/iptables

       # Remove lthe following line from /etc/sysconfig/iptables
       -A LOCAL-INPUT -m state --state NEW -m tcp -p tcp --dport 8140

       # Restart iptables
       service iptables restart
                </programlisting>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-plugins">
      <title>Move <emphasis role="italic">plugins</emphasis> to <emphasis role="italic">lib</emphasis></title>
      <para>
      Within a module, facts or functions that were located previously at
      <emphasis role="italic">[module]/plugins</emphasis> now need to be located
      at <emphasis role="italic">[module]/lib</emphasis>. The table below lists the
      steps to move these facts.
      </para>
      <table frame="all">
        <title>Move <emphasis role="italic">plugins</emphasis> to <emphasis role="italic">lib</emphasis> Procedure</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <colspec colnum="1" colname="c1" colwidth="*"/>
          <colspec colnum="2" colname="c2" colwidth="8*"/>
          <thead>
            <row>
              <entry>Step</entry>
              <entry>Process/Action</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>1.</entry>
              <entry>Type <emphasis role="bold">cd /etc/puppet/modules for dir in *; do</emphasis></entry>
            </row>
            <row>
              <entry>2.</entry>
              <entry>Type <emphasis role="bold">mv $dir/plugins $dir/lib; done</emphasis></entry>
            </row>
		     </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-paths">
      <title>Change the File Source Path</title>
      <para>
      Inside a file resource, change the
      <emphasis role="italic">$puppet_server/[module]/[file]</emphasis> source path to
      <emphasis role="italic">$puppet_server/modules/[module]/[file]</emphasis>. The
      example below demonstrates this action.
      </para>
      <example>
        <title>Code to Change the File Source Path</title>
        <indexterm>
          <primary>Upgrade Puppet</primary>
          <secondary>Change the File Source Path</secondary>
        </indexterm>
        <indexterm>
          <primary>Examples</primary>
          <secondary>Change the File Source Path</secondary>
        </indexterm>
        <indexterm>
          <primary>Upgrade Puppet</primary>
          <seealso>Examples</seealso>
        </indexterm>
        <programlisting language="Ruby">
       # Old Version

       file { '/foo/bar':
         source => "puppet://$puppet_server/[module]/[file]"
       }

       # Corrected Version

       file { '/foo/bar':
         source => "puppet://$puppet_server/modules/[module]/[file]"
       }
       </programlisting>
      </example>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-varnames">
      <title>Remove the Name Variable from Defines</title>
      <para>
      Puppet previously allowed the use of the
      <emphasis role="italic">name</emphasis> variable in Defines.
      This is no longer permitted and will cause a compilation error.
      </para>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-dependency">
      <title>Remove Tidy File Dependencies</title>
      <para>
      Puppet added an implicit
      <emphasis role="italic">requires =&gt; File[&lt;File Name&gt;]</emphasis>
      to tidy <emphasis role="italic">{&lt;File Name&gt;: }</emphasis> resources.
      Any file resources that have a dependency on the tidy for that file
      will cause a compilation error due to cyclical dependencies. Remove these
      dependencies.
      </para>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-defines">
      <title>Fully Scope Defines</title>
      <para>
      Defines calls must now be scoped fully. For example, in
      <emphasis role="italic">common/manifests/inittab.pp</emphasis>, the user
      was able to call <emphasis role="bold">inittab::modify</emphasis>; however
      the user must now call <emphasis role="bold">common::inittab::modify</emphasis>.
      </para>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-cmds">
      <title>Start All Commands with a Valid Command</title>
      <para>Command assignments in <emphasis role="italic">exec</emphasis> blocks
      that do not begin with an actual command (e.g., that begin with "if" or a
      variable assignment) will no longer work. To work around this issue, add
      <emphasis role="bold">/bin/true;</emphasis> to the beginning of the command. The
      example below demonstrates where to place the command.
      </para>
      <example>
        <title>Code to Make All Commands Valid</title>
        <indexterm>
          <primary>Upgrade Puppet</primary>
          <secondary>Make All Commands Valid</secondary>
        </indexterm>
        <indexterm>
          <primary>Examples</primary>
          <secondary>Make All Commands Valid</secondary>
        </indexterm>
        <programlisting language="Ruby">
       # Old Version

       exec { "foo":
         command => 'if thing; then ... '
       }

       # Corrected Version

       exec { "foo":
         command => '/bin/true; if thing; then ... '
       }
       </programlisting>
      </example>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-catalog">
      <title>Modify the Catalogue Injection Code</title>
      <para>
      If custom types or other scripts that use catalog injections exist,
      update them; the Puppet internals have changed.
      </para>
      <note>
      <para>
      View the differences between versions 1.3 and 2.0 in the
      <emphasis role="italic">add_hosts.rb</emphasis> file under the
      <emphasis role="italic">common</emphasis> module or the differences
      in <emphasis role="italic">svckill.rb</emphasis> for details.
      </para>
      </note>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-execNames">
      <title>Modify Puppet Executable Names</title>
      <para>
      Most Puppet executables have new names. Modify any scripts
      referring to them.
      </para>
      <para>
       The following table contains examples of some of the changes.
      </para>
      <table frame="all">
        <title>Puppet Executable Names</title>
        <indexterm>
          <primary>Tables</primary>
          <secondary>New Puppet Executable Names</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>puppetd</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>puppet agent</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>puppetmaster</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>puppet master</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>puppetca</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>puppet cert</secondary>
        </indexterm>
        <indexterm>
          <primary>Puppet Executable Names</primary>
          <secondary>rals</secondary>
        </indexterm>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <thead>
            <row>
              <entry>Old Command</entry>
              <entry>New Command</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>puppetd</entry>
              <entry>puppet agent</entry>
            </row>
            <row>
              <entry>puppetmaster</entry>
              <entry>puppet master</entry>
            </row>
            <row>
              <entry>puppetca</entry>
              <entry>puppet cert</entry>
            </row>
            <row>
              <entry>rals</entry>
              <entry>puppet resource</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-varScoping">
      <title>Explicitly Scope Variables</title>
      <para>
      Though not a current requirement, all variables will need to be
      scoped explicitly in the future. For example, change
      <emphasis role="bold">$foo</emphasis> to
      <emphasis role="bold">$::foo</emphasis>.
      </para>
    </section>
    <section id="sect-ug-Puppet_Upgrade-Migration-symlink">
      <title>Overwrite Symlinks</title>
      <para>
      In previous versions of Puppet, the
      <emphasis role="bold">file { "foo: ensure => 'present', content => 'foo' }</emphasis>
      command would overwrite a symlink at <emphasis role="italic">foo</emphasis> with the
      file containing the specified information. To get this behavior in the current
      version of Puppet, change the <emphasis role="bold">ensure => 'present'</emphasis> portion
      of the command in the resource declaration to <emphasis role="bold">ensure => 'file'</emphasis>.
      </para>
    </section>
  </section>
  </section>
  <section id="sect-ug-Puppet_Upgrade_3">
    <title id="sect-ug-Puppet_Upgrade_3-title">Puppet 3.X Upgrade</title>
    <para>
      This section provides guidance on upgrading from Puppet 2.7.X to Puppet 3.X.
    </para>
    <section id="sect-ug-Puppet_3_History">
      <title id="sect-ug-Puppet_3_History-title">History</title>
      <para>
        With the large-scale support included in Puppet 2.7, one major drawback seen by users was that there
        was a significant decrease in the speed of Puppet.  Puppet 3.X includes many improvements to fix these
        speed issues and Puppetlabs has reported that up to 50% performance increases have been seen by users
        switching from puppet 2.7 to puppet 3.X.  The specific speed-ups seen by SIMP systems are still being
        observed, but noticeable improvements should be seen right away after upgrading.
      </para>
      <para>
        Other improvements to Puppet included in the introduction of Puppet 3.X are improved version numbers,
        automatic data bindings for class parameters, and Hiera functions now being included in the Puppet core.
        Puppet 3.1, the specific version being implemented by SIMP has upgrades to Solaris support and increased
        functionality for backwards-compatibility.
      </para>
    </section>
    <section id="sect-ug-Puppet_3_Migration">
      <title id="sect-ug-Puppet_3_Migration-title">Migration</title>
      <para>
        The following sections provide steps to successfully migrate the SIMP codebase to use Puppet 3.X.
        SIMP 4.1.X is currently using Puppet 3.1.0, however the migration steps below should apply to any
        Puppet 3.X release earlier than 3.1.0.
      </para>
      <section id="sect-ug-Puppet_3_Migration-Script">
        <title id="sect-ug-Puppet_3_Migration-Script-title">Automatic Upgrade Scripts and Manual Upgrade</title>
        <para>
          SIMP provides two scripts to assist with the upgrade from 4.0.X to 4.1.X.  The scripts perform the
          following operations.
          <table frame="all">
            <title>SIMP Automatic Upgrade Script</title>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
              <colspec colnum="1" colname="c1" colwidth="*"/>
              <colspec colnum="2" colname="c2" colwidth="8*"/>
              <thead>
                <row>
                  <entry>Step</entry>
                  <entry>Process/Action</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry> <orderedlist><listitem><para/></listitem></orderedlist> </entry>
                  <entry>
                    Update Yum: Move /srv/www/Local/* to /srv/www/yum/SIMP, and symlink back to Local.
                    Copy the SIMP rpms into SIMP from the 4.1 distribution DVD.  Unpack the 4.1 distribution
                    DVD.  Run yum upgrade.
                  </entry>
                </row>
                <row>
                  <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
                  <entry>
                    Create the Hieradata space, and convert all of Extdata (csv) to Hiera (yaml).  This is
                    accomplished with two scripts, described in the section: Converting Extdata to Hiera.
                  </entry>
                </row>
                <row>
                  <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
                  <entry>
                    Use the updated version of puppet.conf and configure it with 'server, stringify_facts,
                    ca_server, and ca_port.  Copy in the new config.ru file from the pupmod template.
                  </entry>
                </row>
                <row>
                  <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
                  <entry>
                    Create an Apache configuration file for the old Local repo for access during upgrade.
                  </entry>
                </row>
                <row>
                  <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
                  <entry>
                    Optionally recursively replace all instances of 'extlookup' with 'hiera' in /etc/puppet/modules/*
                  </entry>
                </row>
                <row>
                  <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
                  <entry>
                    Bootstrap.
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          To use the scripts, copy a 4.1 distribution DVD onto the target 4.0 server.  Mount the DVD.
          From the root level of the DVD, the scripts are: upgrade/upgrade, upgrade/simpdef2hiera.
          Copy both scripts into the same directory, say, root's home directory.  Unmount the DVD.
          <warning>
            <para>  
              Before running the scripts, it is required you disable Puppet.
              Do not kill the scripts at any point during the upgrade.
            </para>
          </warning>
          To begin the upgrade, navigate to the copied upgrade scripts and run the following.  Note that during operation,
          the scripts will sit with no indication of progress for long periods of time.
          <programlisting language="Ruby">
            ruby upgrade --dvd /path/to/4.1/distroDVD.iso
          </programlisting>
          <note>
            <para>
              After running the scripts, it is recommended you run puppet twice to ensure the
              full configuration is applied after bootstrap.
            </para>
          </note>
          To manually upgrade Puppet, use the upgrade script as a guide.  The same process must be followed.
        </para>
      </section>
      <section id="sect-ug-Puppet_3_Migration-Hiera">
        <title id="sect-ug-Puppet_3_Migration-Hiera-title">Converting from Extdata to Hiera</title>
        <para>
          SIMP now uses Hiera natively instead of Extdata. Tools have been put into place by Puppet Labs
          and SIMP to make the conversion as easy as possible.  Two scripts have been provided to automatically
          convert generic csv files and simp_def.csv to yaml.  The first example shows how to convert an Extdata
          csv file called foo.csv into a Hiera yaml file called bar.yaml:
          <programlisting language="Ruby">
            extdata2hiera -i foo.csv -o bar.yaml
          </programlisting>
          The second example shows how to convert an Extdata csv simp_def file called simp_def.csv into a Hiera
          yaml file called simp_def.yaml.
          <programlisting language="Ruby">
            simpdef2hiera --in simp_def.csv --out simp_def.yaml
          </programlisting>
          Puppet will automatically retrieve class parameters from Hiera, using lookup keys like
          myclass::parameter_one. Puppet classes can optionally include parameters in their definition. This lets
          the class ask for data to be passed in at the time that it’s declared, and it can use that data as
          normal variables throughout its definition.
        </para>
        <para>
          There are two main ways to reference Hiera data in puppet manifests. The first, and preferred way, is
          to use the automatic class variable lookup capability.

          For each class that you create, the variables will be automatically discovered in hiera should they exist.
          This is quite powerful in that you no longer need to provide class parameters in your manifests and can
          finally properly separate your data from your code.

          <note>
            <para>
            For more information on the lookup functions, see <ulink url="http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions">
            http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions</ulink>.
            </para>
          </note>

          <programlisting language="Ruby">
        # Some class file in scope...
        class foo (
          $param1 = 'default1'
          $param2 = 'default2'
        ) { .... }

        # /etc/puppet/hieradata/default.yaml
        ---
        foo::param1: 'custom1'
          </programlisting>
          The second is similar to the old Extdata way, and looks like the following:
          <programlisting language="Ruby">
        $var = hiera("some_hiera_variable", "default_value")
          </programlisting>
        </para>
        <para>
          The following is from the Puppet Labs documentation, and explains the reason for switching to Hiera.
        </para>
        <para>
          Automatic parameter lookup is good for writing reusable code because it is regular and predictable.
          Anyone downloading your module can look at the first line of each manifest and easily see which keys they
          need to set in their own Hiera data. If you use the Hiera functions in the body of a class instead, you
          will need to clearly document which keys the user needs to set.

          <note>
            <para>
            For more information on hiera and puppet in general, see <ulink url="http://docs.puppetlabs.com/hiera/1/complete_example.html">
            http://docs.puppetlabs.com/hiera/1/complete_example.html</ulink>.
            </para>
          </note>
        </para>
      </section>
      <section id="sect-ug-Puppet_3_Migration-Scope_Functions">
        <title id="sect-ug-Puppet_3_Migration-Scope_Functions-title">Scope Functions</title>
        <para>
          All scope functions must take arguments in array form. For example in
          /etc/puppet/modules/apache/templates/ssl.conf.erb, &lt;%= scope.function_bracketize(l) %&gt;
          becomes &lt;%= scope.function_bracketize([l]) %&gt;.
        </para>
      </section>
      <section id="sect-ug-Puppet_3_Migration-Cucumber">
        <title id="sect-ug-Puppet_3_Migration-Cucumber-title">Cucumber Tests</title>
        <para>
          Since the installation of Puppet 3.X now requires rubygem-hiera to not be installed, any existing
          Cucumber tests will no longer be able to run with the ruby-gem hiera dependency. This dependency
          must be removed prior to being able to run the SIMP Cucumber tests.
        </para>
      </section>
      <section id="sect-ug-Puppet_3_Migration-Commands">
        <title id="sect-ug-Puppet_3_Migration-Commands-title">Commands</title>
        <para>
          Depreciated commands mentioned in Puppet 2.7 upgrade are now completely removed.
        </para>
      </section>
      <section id="sect-ug-Puppet_3_Migration-Lockfile">
        <title id="sect-ug-Puppet_3_Migration-Lockfile-title">Lock File</title>
        <para>
          Puppet agent now uses the two lock files instead of one. These are the run-in-progress lockfile
          (agent_catalog_run_lockfile) and the disabled lockfile (agent_disabled_lockfile). The puppetagent_cron
          file (made by the pupmod module) must be edited to suit this change.
        </para>
      </section>
    </section>
  </section>
</chapter>

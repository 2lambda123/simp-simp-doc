<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "../SIMP_Documentation.ent">
%BOOK_ENTITIES;
]>
<chapter id="ch-ug-Managing_Workstation_Infrastructures">
  <chapterinfo>
    <title id="ch-ug-Managing_Workstation_Infrastructures-title">Managing Workstation Infrastructures</title>
    <affiliation>
      <orgname>SIMP team</orgname>
    </affiliation>
    <keywordset>
      <keyword>Graphical User Interface</keyword>
      <keyword>GUI</keyword>
      <keyword>Gnome</keyword>
      <keyword>VNC</keyword>
    </keywordset>
    <itermset>
      <indexterm>
        <primary>GUI</primary>
        <secondary>Gnome</secondary>
        <seealso>VNC</seealso>
      </indexterm>
      <indexterm>
        <primary>VNC</primary>
        <seealso>GUI</seealso>
      </indexterm>
    </itermset>
  </chapterinfo>
  <title>Managing Workstation Infrastructures</title>
  <para>
    This chapter describes how to manage client workstations with a SIMP system
    including GUIs, repositories, virtualization, Network File System (NFS), printing, and Virtual Network Computing (VNC).
  </para>
   <section id="sect-ug-Infrastructure-Setup">
      <title id="sect-ug-Infrastructure-Setup-title">Infrastructure Setup</title>
      <para>
        The following sections provide examples for setting up a SIMP workstation environment.
      </para>
      <section id="sect-ug-User-Workstation">
        <title>User Workstation Setup</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/manifests/workstation.pp</emphasis> for setting up a user workstation.
        </para>
        <example>
            <title>Code for User Workstation</title>
            <programlisting language="Ruby">
        class site::workstation {
          include 'site::gui'
          include 'site::repos'
          include 'site::virt'
          include 'site::automount'
          include 'site::print::client'

          # Make sure everyone can log into all nodes.
          # If you want to change this, simply remove this line and add
          # individual entries to your nodes as appropriate
          pam::access::manage { "Allow Users":
            comment => 'Allow all users in the "users" group to access the system from anywhere.',
            users   => '(users)',
            origins => ['ALL']
          }

          # General Use Packages
          package { [
            'pidgin',
            'git',
            'control-center-extra',
            'gconf-editor',
            'evince',
            'libreoffice-writer',
            'libreoffice-xsltfilter',
            'libreoffice-calc',
            'libreoffice-impress',
            'libreoffice-emailmerge',
            'libreoffice-base',
            'libreoffice-math',
            'libreoffice-pdfimport',
            'bluefish',
            'gnome-media',
            'pulseaudio',
            'file-roller',
            'inkscape',
            'gedit-plugins',
            'planner'
          ]: ensure => 'latest'
          }
        }
            </programlisting>
          </example>
      </section>
      <section id="sect-ug-Graphical-Desktop-Setup">
        <title>Graphical Desktop Setup</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/manifests/gui.pp</emphasis> for setting up a graphical desktop on a user workstation.
        </para>
        <example>
            <title>Code for Graphical Desktop</title>
            <programlisting language="Ruby">
        class site::gui {
          include 'xwindows::gdm'
          include 'windowmanager::gnome'
          include 'vnc::client'

           # Compiz Stuff
          package { [
            'fusion-icon',
            'emerald-themes',
            'compiz-fusion-extras',
            'compiz-fusion-extras-gnome',
            'vinagre'
          ]:
            ensure => 'latest'
          }
        }
            </programlisting>
          </example>
      </section>
      <section id="sect-ug-Workstation-Repositories">
        <title>Workstation Repositories</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/manifests/repos.pp</emphasis> for setting up workstation repositories.
        </para>
        <example>
            <title>Code for Workstation Repositories</title>
            <programlisting language="Ruby">
        class site::repos {
          # Whatever local yumrepo statements you need for installing
          # your packages and keeping your systems up to date
        }
            </programlisting>
          </example>
      </section>
      <section id="sect-ug-Virtualization-on-User-Workstations">
        <title>Virtualization on User Workstations</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/manifests/virt.pp</emphasis> for allowing virtualization on a user workstation.
        </para>
        <example>
            <title>Code for Virtualization on a User Workstation</title>
            <programlisting language="Ruby">
        # We allow users to run Vms on their workstations.
        # If you don't want this, just don't include this class.
        # If this is installed, VM creation and management is still limited by PolicyKit

        class site::virt {
          include 'libvirt::kvm'
          include 'libvirt::ksm'
          include 'network::redhat'

          network::redhat::add_eth { "em1":
            bridge => 'br0',
            hwaddr => $::macaddress_em1
          }

          network::redhat::add_eth { "br0":
            net_type => 'Bridge',
            hwaddr => $::macaddress_em1,
            require => Network::Redhat::Add_eth["em1"]
          }

          common::swappiness::conf { 'default':
            high_swappiness => '80',
            max_swappiness => '100'
          }

          # If 80% of memory is used, flush caches.
          exec { 'flush_cache_himem':

            command => '/bin/echo 1 > /proc/sys/vm/drop-caches',
            onlyif => inline_template("/bin/&lt;%= memoryfree.split(/\s/)[0].to_f/memorysize.split(/\s/)[0].to_f &lt; 0.2 ? true : false %&gt;")
          }

          package { 'virt-manager': ensure => 'latest' }
        }
            </programlisting>
          </example>
      </section>
      <section id="sect-ug-Network-File-System">
        <title>Network File System</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/automount.pp</emphasis> for Network File System setup.
        </para>
        <example>
            <title>Code for setting up NFS</title>
            <programlisting language="Ruby">
        #If you are not using NFS, you do not need to include this.

        class site::automount {
          include 'autofs'

          file { '/net':
            ensure => 'directory',
            mode   => '0755'
          }

        #A global share
        Autofs::map::master { ‘share’:
          mount_point => ‘/net’,
          map_name    => ‘/etc/autofs/share.map’
        }
        #Map the share
        autofs::map::entry { ‘share’:
          options    => ‘-fstype=nfs4, port=2049.soft’,
        location    => “${::nfs_server}:/share’.
        Target     => ‘share’
        }
        }
            </programlisting>
          </example>
      </section>
      <section id="sect-ug-Setting-up-a-Printer-Environment">
        <title>Setting up a Printer Environment</title>
        <para>Below are example manifests for setting up a printing environment.
        </para>
        <section id="sect-ug-Setting-up-a-Print-Client">
        <title>Setting up a Print Client</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/manifests/print/client.pp</emphasis> for setting up a print client.
        </para>
        <example>
            <title>Code for Print Client</title>
            <programlisting language="Ruby">
        class site::print::client inherits site::print::server {
          polkit::local_authority { 'print_support':
            identity                 => ['unix_group:*'],
            action                   => 'org.opensuse.cupskhelper.mechanism.*',
            section_name       => 'Allow all print management permissions',
            result_any            => 'yes',
            result_interactive => 'yes',
            result_active         => 'yes'
          }

          package { 'cups-pdf': ensure => 'latest' }
          package { 'cups-pk-helper': ensure => 'latest' }
          package { 'system-config-printer': ensure => 'present' }
        }
            </programlisting>
          </example>
        </section>
        <section id="sect-ug-Setting-up-a-Print-Server">
        <title>Setting up a Print Server</title>
        <para>Below is an example manifest called <emphasis role="italic">/etc/puppet/modules/site/manifests/print/server.pp</emphasis> for setting up a print server.
        </para>
        <example>
            <title>Code for Print Server</title>
            <programlisting language="Ruby">
        class site::print::server {

          # Note, this is *not * set up for being a central print server.
          # You'll need to add the appropriate IPTables rules for that to work.
          package { 'cups': ensure => 'latest' }

          service { 'cups':
            enable     => 'true',
            ensure     => 'running',
            hasrestart => 'true',
            hasstatus  => 'true',
            require    => Package['cups']
          }
        }
            </programlisting>
          </example>
        </section>
        </section>
    </section>
    <section id="sect-ug-GUI-VNC">
      <title>VNC</title>
      <para>
      <xref linkend="ug-glossary-vnc-desc"
            endterm="ug-vnc-term" />is a tool that is used to manage desktops and workstations
      remotely through the standard setup or a proxy.
      </para>
      <section id="sect-ug-GUI-VNC-setup">
        <title>VNC Standard Setup</title>
        <note>
          <para>
            You must have the <emphasis role="bold">pupmod-vnc</emphasis> RPM installed to use VNC on your system!
          </para>
        </note>
        <para>
          To enable remote access via VNC on the system, include
          <emphasis role="bold">vnc::server</emphasis> in Hiera for the node.
        </para>
        <para>
          The default VNC setup that comes with SIMP can only be
          used over SSH and includes three default settings:
        </para>
       <table frame="all">
        <title>VNC Default Settings</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <thead>
            <row>
              <entry>Setting Type</entry>
              <entry>Setting Details</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><emphasis role="bold">Standard</emphasis></entry>
              <entry><para>Port: 5901</para>
              <para>Resolution: 1024x768@16</para></entry>
            </row>
            <row>
              <entry><emphasis role="bold">Low Resolution</emphasis></entry>
              <entry><para>Port: 5902</para>
              <para>Resolution: 800x600@16</para></entry>
            </row>
            <row>
              <entry><emphasis role="bold">High Resolution</emphasis></entry>
              <entry><para>Port: 5903</para>
                <para>Resolution: 1280x1024@16</para></entry>
            </row>
		      </tbody>
        </tgroup>
      </table>
        <para>
         To connect to any of these settings, SSH into the system
         running the VNC server and provide a tunnel to
         <emphasis role="italic">127.0.0.1:&lt;VNC Port&gt;</emphasis>.
         Refer to the SSH client's documentation for specific instructions.
        </para>
        <para>
          To set up additional VNC port settings, refer to the code in
          <emphasis role="italic"><ulink url="file:///etc/puppet/modules/vnc/manifests/server.pp">/etc/puppet/modules/vnc/manifests/server.pp</ulink></emphasis>
          for examples.
        </para>
		  <important>
        <para>
          Multiple users can log on to the same system at the same time with
          no adverse effects; however, none of these sessions are persistent.
        </para>
        <para>
          To maintain a persistent VNC session, use the <emphasis role="bold">vncserver</emphasis>
          application on the remote host. Type <emphasis role="bold">man vncserver</emphasis>
          to reference the manual for additional details.
        </para>
        </important>
      </section>
      <section id="sect-ug-GUI-VNC-withProxy">
        <title>VNC Through a Proxy</title>
        <para>
        The section describes the process to VNC through a proxy.
        This setup provides the user with a persistent VNC session.
        </para>
        <important>
        <para>
        In order for this setup to work, the system must have a VNC server
        (<emphasis role="italic">vserver.your.domain</emphasis>), a VNC client
        (<emphasis role="italic">vclnt.your.domain</emphasis>), and a proxy
        (<emphasis role="italic">proxy.your.domain</emphasis>). A
        <emphasis role="italic">vuser</emphasis> account must also be set up as
        the account being used for the VNC. The <emphasis role="italic">vuser</emphasis>
        is a common user that has access to the server, client, and proxy.
        </para>
        </important>
        <section id="sect-ug-GUI-VNC-withProxy-modifications">
          <title>Modify Puppet</title>
          <para>
            If definitions for the machines involved in the VNC
            do not already exist in Hiera, create an
            <emphasis role="italic">/etc/puppet/hieradata/hosts/vserv.your.domain.yaml</emphasis>
            file. In the client hosts file, modify or create the entries
            shown in the examples below. These additional modules will allow
            vserv to act as a VNC server and vclnt to act as a client.
          </para>
          <example>
            <title>Code for VNC Server Node</title>
            <indexterm>
              <primary>Source</primary>
              <secondary>VNC Server node</secondary>
              <seealso>VNC</seealso>
            </indexterm>
            <programlisting language="Ruby">
        # vserv.your.domain.yaml
        classes:
          - 'windowmanager::gnome'
          - 'mozilla::firefox'
          - 'vnc::server'
            </programlisting>
          </example>
          <example>
            <title>Code for VNC Client Node</title>
            <indexterm>
              <primary>Source</primary>
              <secondary>VNC client node</secondary>
              <seealso>VNC</seealso>
            </indexterm>
            <programlisting language="Ruby">
        # vclnt.your.domain.yaml
        classes:
          - 'windowmanager::gnome'
          - 'mozilla::firefox'
          - 'vnc::client'
            </programlisting>
          </example>
        </section>
        <section id="sect-ug-GUI-VNC-withProxy-RunningTheServer">
          <title>Run the Server</title>
          <para>
          As <emphasis role="italic">vuser</emphasis> on
          <emphasis role="italic">vserv.your.domain</emphasis>,
          type <emphasis role="bold">vncserver</emphasis>.
          </para>
          <para>
          The output should mirror the following:
          </para>
          <para>
          <emphasis role="italic">New 'vserv.your.domain:&lt;Port Number&gt; (vuser)'
          desktop is vserv.your.domain:&lt;Port Number&gt;</emphasis>
          </para>
          <para>
          <emphasis role="italic">Starting applications specified in
          /home/vuser/.vnc/xstartup Log file is
          /home/vuser/.vnc/vserv.your.domain:&lt;Port Number&gt;.log</emphasis>
          </para>
          <note>
          <para>
           Remember the port number; it will be needed to set up an SSH tunnel.
          </para>
          </note>
        </section>
        <section id="sect-ug-GUI-VNC-withProxy-SSH_Tunneling">
          <title>Set up an SSH Tunnel</title>
          <para>
          Set up a tunnel from the client (vclnt), through the
          proxy server (proxy), to the server (vserv). The table below lists the
          steps to set up the tunnel.
          </para>
      <table frame="all">
        <title>Set Up SSH Tunnel Procedure</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <colspec colnum="1" colname="c1" colwidth="*"/>
          <colspec colnum="2" colname="c2" colwidth="8*"/>
          <thead>
            <row>
              <entry>Step</entry>
              <entry>Process/Action</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><orderedlist><listitem><para/></listitem></orderedlist></entry>
              <entry>
              <para>On the workstation, type <emphasis role="bold">ssh -l vuser -L 590<emphasis role="bold"><emphasis role="italic">&lt;Port
              Number&gt;</emphasis></emphasis>:localhost:590<emphasis role="bold"><emphasis role="italic">&lt;Port Number&gt;</emphasis></emphasis>proxy.your.domain</emphasis>
              </para>
              <para><emphasis role="bold">NOTE</emphasis>: This command takes the user to the proxy.
              </para>
              </entry>
            </row>
            <row>
              <entry><orderedlist continuation="continues"><listitem><para/></listitem></orderedlist></entry>
              <entry><para>On the proxy, type <emphasis role="bold">ssh -l vuser -L 590<emphasis role="bold"><emphasis role="italic">&lt;Port
              Number&gt;</emphasis></emphasis>:localhost:590<emphasis role="bold"><emphasis role="italic">&lt;Port Number&gt;</emphasis></emphasis>vserv.your.domain</emphasis>
	           </para>
	           <para><emphasis role="bold">NOTE</emphasis>: This command takes the user to the VNC server.
              </para>
         	  </entry>
            </row>
		     </tbody>
        </tgroup>
      </table>
          <note>
          <para>
          The port number in 590<emphasis role="italic">&lt;Port Number&gt;</emphasis>
          is the same port number as previously described. For example, if the
          <emphasis role="italic">&lt;Port Number&gt;</emphasis> was 6, then all
          references below to 590<emphasis role="italic">&lt;Port Number&gt;</emphasis>
          become 5906.
          </para>
          </note>
        </section>
        <section id="sect-ug-GUI-VNC-withProxy-ClientSetup">
          <title>Set Up Clients</title>
          <para>
          On <emphasis role="italic">vclnt.your.domain</emphasis>, type
          <emphasis role="bold">vncviewer localhost:590<emphasis role="bold"><emphasis role="italic">&lt;Port Number&gt;</emphasis></emphasis></emphasis>
          to open the Remote Desktop viewer.
          </para>
        </section>
        <section id="sect-ug-GUI-VNC-withProxy-Troubleshooting">
          <title>Troubleshooting VNC Issues</title>
          <para>
           If nothing appears in the terminal window, X may have crashed.
           To determine if this is the case, type
           <emphasis role="bold">ps -ef | grep XKeepsCrashing</emphasis>
         </para>
         <para>
          If any matches result, stop the process associated with the command
          and try to restart <emphasis role="italic">vncviewer</emphasis> on
          <emphasis role="italic">vclnt.your.domain</emphasis>.
         </para>
      </section>
    </section>
  </section>
</chapter>

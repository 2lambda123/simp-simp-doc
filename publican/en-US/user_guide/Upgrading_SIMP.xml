<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % BOOK_ENTITIES SYSTEM "../SIMP_Documentation.ent">
%BOOK_ENTITIES;
]>
<chapter id="ch-ug-Upgrading_Puppet">
  <chapterinfo>
    <title id="ch-ug-Upgrading_Puppet-title">Upgrading SIMP</title>
    <affiliation>
      <orgname>SIMP team</orgname>
    </affiliation>
    <keywordset>
      <keyword>upgrade</keyword>
      <keyword>Puppet</keyword>
      <keyword>catalog</keyword>
      <keyword>variables</keyword>
      <keyword>scoping</keyword>
      <keyword></keyword>
      <keyword>resources</keyword>
    </keywordset>
    <itermset>
      <indexterm>
        <primary>Puppet</primary>
        <secondary>upgrade</secondary>
      </indexterm>
      <indexterm>
        <primary>upgrade</primary>
        <secondary>Puppet</secondary>
      </indexterm>
    </itermset>
  </chapterinfo>
  <title>Upgrading SIMP</title>
    <para>
      This chapter provides information on how to upgrade a running
      instance to the latest codebase.
    </para>
  <xi:include href="Puppetmaster_Backup.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
  <section id="sect-ug-Puppet-Pre-Upgrade">
    <title>Pre-Upgrade Recommendations</title>
    <para>
      The following process should be followed before upgrade.
    </para>
    <table frame="all">
      <title>SIMP Pre Upgrade</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <colspec colnum="1" colname="c1" colwidth="*"/>
        <colspec colnum="2" colname="c2" colwidth="8*"/>
        <thead>
          <row>
            <entry>Step</entry>
            <entry>Process/Action</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry> <orderedlist><listitem><para/></listitem></orderedlist> </entry>
            <entry>
              Run <emphasis role="bold">puppet agent
              --disable</emphasis> to disable puppet.
              <para></para>
              <para> <emphasis role="bold">Note:</emphasis>
                  If you think you will need more than 4 hours to
                  complete this task, also disable puppet in root's
                  crontab.
                </para>
            </entry>
          </row>
          <row>
            <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
            <entry>
              <para>
                You may wish to block all communications
                with agents while updating the server. This is not required but
                could spare you some headaches if something doesn't work
                properly.
              </para>
              <para>
                The simplest way to do this is to set the catalog retrieval
                capability to 127.0.0.1 in /etc/puppet/auth.conf as shown
                below.
                <programlisting language="Bash">
      path ~ ^/catalog/([^/]+)$
      method find
      # Uncomment this when complete and delete the other entries
      #allow $1
      allow 127.0.0.1
                </programlisting>
                Using the syntax above, you can add fully qualified domain
                names, one at a time, to the 'allow' list and only those hosts
                will be able to retrieve their catalog from the running server.
                127.0.0.1 serves as a placeholder so that no host can actually
                retrieve their catalog.
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="sect-ug-Migrating-To-Environments">
    <title>Migrating To Environments</title>
    <para>
      SIMP 4.1 and 5.0 used the traditional, Rack-based, Puppet Master.
      Starting with 4.2 and 5.1, SIMP now uses the Clojure-based Puppet Server.

      Unfortunately, there are some conflicts with directly upgrading from the
      Puppet Master to the Puppet Server since some of the RPM package
      prerequisites conflict.

      This new Puppet Server can properly utilize Puppet Environments. To
      provide our users with this capability, and to facilitate more dynamic
      workflows in the future, the SIMP team has migrated
      <emphasis role="bold">all</emphasis> existing material to a native
      <emphasis role="italic">simp</emphasis> environment.

      To help facilitate your migration, the SIMP team has created two
      migration scripts that both upgrade your Puppet Server and migrate your
      existing data into the new <emphasis role="italic">simp</emphasis>
      environment.
      <warning>
        <para>
          You must have at least <emphasis role="bold">2.2G</emphasis> of
          <emphasis role="bold">free memory</emphasis> to run the new Puppet
          Server.
        </para>
      </warning>
    </para>
    <section id="sect-ug-Migrating-To-Environments-Changes">
      <title>Migration Script Features</title>
      <para>
        The migration script will perform the following actions on your system:
      </para>
      <para>
        <itemizedlist>
          <listitem>
            <para>
              Remove the <emphasis role="bold">puppet-server</emphasis> package
              from your system
            </para>
          </listitem>
          <listitem>
            <para>
              Install the <emphasis role="bold">puppetserver</emphasis> package
              onto your system
            </para>
          </listitem>
          <listitem>
            <para>
              Update all packages from your repositories
            </para>
          </listitem>
          <listitem>
            <para>
              Create a backup folder at <emphasis role="italic">
                /etc/puppet/environments/pre_migration.simp</emphasis>
            </para>
          </listitem>
          <listitem>
            <para>
              Create a Git repository in the backup folder under a timestamped
              directory
            </para>
          </listitem>
          <listitem>
            <para>
              Commit all current materials from /etc/puppet into the backup Git repository
            </para>
          </listitem>
          <listitem>
            <para>
              Checkout the backup Git repository under the timestamped
              directory as <emphasis role="italic">backup_data</emphasis> for
              ease of use
            </para>
          </listitem>
          <listitem>
            <para>
              Migrate all existing data into the new
              <emphasis role="bold">simp</emphasis> environment under
              <emphasis role="italic">/etc/puppet/environments/simp</emphasis>
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <note>
        <para>
          All future upgrades will only affect the new
          <emphasis role="bold">simp</emphasis> environment. You may create new
          environments and/or modify the contents of
          <emphasis role="italic">/etc/puppet/modules</emphasis> without fear
          of the SIMP packages overwriting your work.
        </para>
      </note>
    </section>
    <section id="sect-ug-Migration-Script-Execution">
      <title>Migration Script Execution</title>
      <para>
      <table frame="all">
        <title>Executing the Migration Script</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <colspec colnum="1" colname="c1" colwidth="*"/>
          <colspec colnum="2" colname="c2" colwidth="8*"/>
          <thead>
            <row>
              <entry>Step</entry>
              <entry>Process/Action</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry> <orderedlist><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Copy the new SIMP ISO onto your system. For the purposes of
                these instructions, we will refer to this is SIMP_Update.iso.

                Please ensure that you are in the directory with the ISO prior
                to proceeding.
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Extract the new <emphasis role="bold">simp-utils</emphasis> package using the following command.
                <programlisting language="Bash">
      isoinfo -i SIMP_Update.iso -R -x `isoinfo -i SIMP_Update.iso -Rf | grep noarch/simp-utils` &gt; simp-utils-update.rpm
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Install the new <emphasis role="bold">simp-utils</emphasis> RPM.
                <programlisting language="Bash">
      yum -y localupdate simp-utils*.rpm
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Unpack the DVD onto the system.
                <programlisting language="Bash">
      /usr/local/bin/unpack_dvd SIMP_Update.iso
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Run the migration script (this may take some time, do NOT, hit CTRL-C!)
                <programlisting language="Bash">
      /usr/share/simp/upgrade_script/migrate_to_environments
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Run the puppet agent.
                <programlisting language="Bash">
      puppet agent -t
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Stop the new puppetserver service (it may not be running).
                <programlisting language="Bash">
      service puppetserver stop
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Remove any left over PID files
                <programlisting language="Bash">
      rm /var/run/puppetserver/puppetserver
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Kill any running <emphasis role="italic">puppet master</emphasis> processes
                <programlisting language="Bash">
      pkill -f 'puppet master'
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Wait for 10 seconds to let things finalize if necessary
                <programlisting language="Bash">
      sleep 10
                </programlisting>
              </entry>
            </row>
            <row>
              <entry> <orderedlist continuation="continues"><listitem><para/></listitem></orderedlist> </entry>
              <entry>
                Start the new Puppet Server
                <programlisting language="Bash">
      service puppetserver start
                </programlisting>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
      <para>
        Your new Puppet Server should now be running and a run of
        <emphasis role="italic">puppet agent -t</emphasis> should complete as
        usual.
      </para>
    </section>
    <section id="sect-ug-Puppet_3_Migration-Hiera">
      <title id="sect-ug-Puppet_3_Migration-Hiera-title">Converting from Extdata to Hiera</title>
      <para>
        SIMP now uses Hiera natively instead of Extdata. Tools have been put
        into place by Puppet Labs and SIMP to make the conversion as easy as
        possible.  Two scripts have been provided to automatically convert
        generic csv files and simp_def.csv to yaml.  The first example shows
        how to convert an Extdata csv file called foo.csv into a Hiera yaml
        file called bar.yaml:
          <programlisting language="Ruby">
            extdata2hiera -i foo.csv -o bar.yaml
          </programlisting>
          The second example shows how to convert an Extdata csv simp_def file
          called simp_def.csv into a Hiera yaml file called simp_def.yaml.
          <programlisting language="Ruby">
            simpdef2hiera --in simp_def.csv --out simp_def.yaml
          </programlisting>
          Puppet will automatically retrieve class parameters from Hiera, using
          lookup keys like myclass::parameter_one. Puppet classes can
          optionally include parameters in their definition. This lets the
          class ask for data to be passed in at the time that it’s declared,
          and it can use that data as normal variables throughout its
          definition.
      </para>
      <para>
        There are two main ways to reference Hiera data in puppet manifests.
        The first, and preferred way, is to use the automatic class variable
        lookup capability.

        For each class that you create, the variables will be automatically
        discovered in hiera should they exist.  This is quite powerful in that
        you no longer need to provide class parameters in your manifests and
        can finally properly separate your data from your code.
        <note>
          <para>
            For more information on the lookup functions, see <ulink url="http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions">
            http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions</ulink>.
          </para>
        </note>

        <programlisting language="Ruby">
        # Some class file in scope...
        class foo (
          $param1 = 'default1'
          $param2 = 'default2'
        ) { .... }

        # /etc/puppet/hieradata/default.yaml
        ---
        foo::param1: 'custom1'
        </programlisting>
          The second is similar to the old Extdata way, and looks like the
          following:
        <programlisting language="Ruby">
        $var = hiera("some_hiera_variable", "default_value")
        </programlisting>
      </para>
    <para>
      The following is from the Puppet Labs documentation, and explains the
      reason for switching to Hiera.
    </para>
    <para>
      Automatic parameter lookup is good for writing reusable code because it
      is regular and predictable.  Anyone downloading your module can look at
      the first line of each manifest and easily see which keys they need to
      set in their own Hiera data. If you use the Hiera functions in the body
      of a class instead, you will need to clearly document which keys the user
      needs to set.
      <note>
        <para>
          For more information on hiera and puppet in general, see <ulink url="http://docs.puppetlabs.com/hiera/1/complete_example.html">
          http://docs.puppetlabs.com/hiera/1/complete_example.html</ulink>.
        </para>
      </note>
    </para>
    </section>
    <section id="sect-ug-Puppet_3_Migration-Scope_Functions">
      <title id="sect-ug-Puppet_3_Migration-Scope_Functions-title">Scope Functions</title>
      <para>
        All scope functions must take arguments in array form. For example in
          /etc/puppet/modules/apache/templates/ssl.conf.erb, &lt;%= scope.function_bracketize(l) %&gt;
          becomes &lt;%= scope.function_bracketize([l]) %&gt;.
      </para>
    </section>
    <section id="sect-ug-Puppet_3_Migration-Cucumber">
      <title id="sect-ug-Puppet_3_Migration-Cucumber-title">Cucumber Tests</title>
      <para>
        Since the installation of Puppet 3.X now requires rubygem-hiera to not
        be installed, any existing Cucumber tests will no longer be able to run
        with the ruby-gem hiera dependency. This dependency must be removed
        prior to being able to run the SIMP Cucumber tests.
      </para>
    </section>
    <section id="sect-ug-Puppet_3_Migration-Commands">
      <title id="sect-ug-Puppet_3_Migration-Commands-title">Commands</title>
      <para>
        Depreciated commands mentioned in Puppet 2.7 upgrade are now completely
        removed.
      </para>
    </section>
    <section id="sect-ug-Puppet_3_Migration-Lockfile">
      <title id="sect-ug-Puppet_3_Migration-Lockfile-title">Lock File</title>
      <para>
        Puppet agent now uses the two lock files instead of one. These are the
        run-in-progress lockfile (agent_catalog_run_lockfile) and the disabled
        lockfile (agent_disabled_lockfile). The puppetagent_cron file (made by
        the pupmod module) must be edited to suit this change.
      </para>
    </section>
  </section>
</chapter>
